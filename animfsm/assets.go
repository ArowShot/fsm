// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/idle.gif
// assets/run.gif
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIdleGif = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\xd7\x7b\x54\x93\xe7\x1d\x07\xf0\x27\xe4\x01\xc3\xc5\x37\x6f\xf2\xbe\x6f\xf2\x22\xeb\x1a\xde\x24\x82\x88\x35\xb4\x28\x6c\x8a\x06\x2f\x88\x41\x10\x99\x4e\xe4\xb8\x36\x41\xcf\xbc\x22\x9e\x4a\x57\xe2\x85\x41\x0c\xda\x40\x73\x91\x23\x22\x97\x41\x6e\xa2\x04\x0c\x17\x11\xc2\x45\xc0\xa8\xa0\xb5\xa2\x8c\xaa\x54\x14\xd0\x9e\xea\xa6\xb3\xd3\x4d\x29\x2a\x8e\x9d\x00\x76\x5a\xed\xd6\x79\x8e\xda\xb3\xbd\x7f\xbf\x7f\x7d\xce\xf7\x7c\x9f\xdf\x77\xde\xfc\xb0\xe0\x20\x19\x06\x28\xf0\x31\x00\xde\x43\xee\x51\x73\x17\xff\x6a\x76\x68\xf4\xdc\x77\xdf\x11\xd1\x69\x00\x00\xef\x07\xd0\xd5\x0d\x00\xe0\x0f\x00\x00\x8e\xdf\x94\x00\x80\x8c\xd8\x10\x59\xf0\x94\xb9\x13\xde\xfb\xaa\xe0\x77\x62\x1e\xd9\x26\x8f\x2b\x8e\x0b\x1b\x6a\x2b\x18\xea\x30\xc7\x2e\x5b\x90\xaa\x48\x9a\x39\x33\x68\xe2\xc4\xf1\xef\x8c\xe3\x87\xa6\xca\x37\xb4\xe4\x0b\x62\x96\x72\x27\x4d\x4b\xfb\x75\xd8\x0a\x71\xc8\x11\xc5\x32\x41\xc4\xd2\xda\xb5\xd1\x8b\xa7\x04\xdf\x6a\x4d\x06\xcf\x7d\xce\x83\x3c\x9e\x66\xe5\x9a\xc2\x78\x14\xdc\x94\xb8\x99\x78\xb5\xb3\xd6\x21\xdb\x97\xd7\x6e\x55\x9d\x9d\xbe\xe4\x0c\xc4\x2f\x24\xed\xbf\xac\x69\x59\x6f\xfc\xad\xd3\x2c\x59\x9c\x8e\x93\x25\x51\xc8\xb6\x04\x93\xd1\x0c\x45\x8b\x54\x98\x54\xee\x03\xe3\xc5\x51\xb6\x06\xd5\xae\xf8\xd0\x78\xaf\xcb\xc9\xb5\xe1\x47\x27\x07\xdc\xfd\xbd\xab\xc7\x58\x0f\x37\x9f\xb4\x64\x3a\xb2\x5d\xc8\x44\x99\x3a\xd6\x6f\xc6\xb0\x31\x24\x53\x80\x6a\xb5\xbb\x58\x6c\x1c\xc3\x98\xb9\x79\x05\x9a\x3c\x9c\x20\x8c\x26\x6a\x5f\xc1\xbe\x12\x4b\x81\xb5\x5c\x77\xc0\x42\xe4\xe9\x4c\xe5\x40\x87\x57\xd5\x37\xe8\x9a\x6b\x29\x43\x5d\x39\xe7\x73\xb0\x8f\xca\x30\x60\x35\x8d\x00\x6e\xce\x40\x1a\xbb\x01\xb7\x07\xc8\x73\x10\x32\x87\xf0\xf4\x44\x20\x77\x41\xdf\x06\x98\x03\xb0\x52\x03\x49\x2e\xb8\x45\x6d\xe6\xd7\x95\xde\xbf\x00\x7d\x07\x96\xb4\xa0\x6e\x27\x9a\x96\x63\x8c\x28\x11\xa9\x2d\xb2\xa7\xbb\x3c\xa0\x45\x9f\xac\x90\x39\xaf\x74\xf6\xb4\x7b\x55\x76\xe8\x9b\x59\xc1\x7e\x29\x4a\x4e\xd6\x1c\xc6\xd3\xe0\x34\x80\x01\xef\xd7\x00\xfe\x88\xc7\xd3\x08\x50\x78\x7d\x99\x9b\xa9\xaf\x30\x0d\xe4\xb4\x88\x6c\xef\x96\xe5\xf4\x97\x16\xbd\x9b\xc7\xf4\x3d\xd6\xb1\x76\x86\xe2\x43\x39\x6c\x84\x4a\x45\x35\x3a\xe9\x67\x5b\xa2\xb7\xf7\x6f\x14\x05\xb2\x60\x9a\x41\xd2\x17\xa7\x65\x1c\x97\x16\xac\xde\x84\xf1\x4f\x28\xaa\xa7\x56\xff\x35\x61\x57\xfc\x07\x31\x3d\x8f\x87\xbd\xe7\xa5\x7e\x4c\x47\x14\x0e\x6f\x2d\x6b\xb9\xc3\x3b\x43\x80\x6a\x34\xba\x11\xef\xbd\xb9\xf9\xea\x5c\x9c\x20\x0c\x46\xca\x9c\x6f\x3e\x50\x92\x7f\xd0\xaa\xdd\x5f\x42\xe4\x6a\x8d\x56\xa0\xc5\x2b\xeb\xea\xb5\x4d\x35\x94\xde\x66\xe5\x9c\x06\x66\x4a\xa5\xc7\x8e\x34\x00\x28\x57\x21\x0d\x97\x00\xf7\x0a\x48\xde\x83\x90\x7b\x46\xbc\x25\xbd\x09\x70\x0f\xc0\x2c\x7a\x92\x94\xdc\xa4\xe4\x7c\x9b\xe5\xde\x79\x18\xf9\xc8\x4f\x0a\xce\xcf\x79\xdb\xea\x4a\xf7\xc1\x95\xb5\x93\x0d\x76\xc5\x23\x20\x58\x7e\xb2\xc2\x1e\xa0\x70\xef\x55\x9f\x8b\xad\xe8\x65\x78\xe1\x21\x33\xe8\xf3\x29\xf8\x62\x6f\x59\xf0\x94\x8c\xd8\x90\xff\xe8\x1d\x9a\x2a\xff\x4e\xfa\x9d\x71\xfc\x0d\x2d\xf9\x3f\xca\xfb\x31\x8f\xa7\x11\x4b\x5d\x14\xa9\x6e\x66\xd2\xe3\x58\x6e\xf1\xc4\x08\xfb\xf5\xb2\xb3\x09\x33\x6e\x54\x71\x78\x35\x14\xa9\xa5\xc9\x5c\x09\x1e\x5e\xe8\xbc\x2a\x54\xb5\x6e\x9c\x75\xe7\xf6\x50\x57\x31\xea\xe4\x32\xc1\x7b\xda\x12\x0a\xdd\xbe\x31\xfe\x0f\x91\x1b\x77\x5e\x3c\xbc\x35\x24\xc6\x3f\x2e\x4c\xde\x33\x36\x7a\x20\x7d\xcb\x87\xc0\x21\x3e\x09\x51\x21\xcc\x65\x63\x50\x16\x5b\xf9\x09\x96\x91\xc9\x44\x71\x16\x0b\xf1\x10\x60\xbb\x77\x23\x45\x18\x4e\xe4\x21\x85\x26\x95\x69\x1f\x41\x18\xf8\x26\x43\xd1\xc1\xf2\x0a\x50\x65\xc0\x0f\x5b\x54\x36\x13\xc5\xb2\x5a\xab\x32\x40\x06\xc6\xcf\x63\x9d\xe0\xb4\x37\x9f\x9a\xcd\x2e\xad\x6a\x6b\x82\x49\x74\x76\x67\x76\x13\xb7\x17\x6c\xea\x66\x93\xdd\x84\xa7\x27\x1b\x72\xc3\xae\xae\x83\xdd\xc0\x7e\x9a\x24\xc3\xfe\x42\x25\xf1\x8f\x15\xdf\x07\xb7\x25\x03\x4b\x5a\xf4\x7f\x56\x33\x52\x58\x8c\x30\x91\xef\xfa\xbd\xf6\xf4\xc4\x01\x5a\xf4\xea\xe8\xc2\x52\xa9\xf3\xd8\x56\xaf\xca\xbb\xea\x66\x96\xc8\x2f\x05\xa7\xad\x10\x67\xa2\x2f\xae\x94\x1f\x29\xfe\x92\x09\x7f\x3c\x5c\x29\x4e\x47\xc9\xb2\x34\x5e\xb5\xf5\x17\x1e\x65\xeb\xba\xbf\x6e\xec\x69\x8c\xfe\x66\xea\x9e\x68\x17\x01\xa9\xf5\x59\x3c\x51\xec\x1b\xec\x7e\xc6\x3e\xbf\x2d\x30\x96\x39\x66\x36\x3b\x94\x41\x1a\x61\xd9\x3d\xa5\xd8\xa3\x49\x15\x38\x35\x20\xc6\x3f\x7c\xd5\xec\xcd\x85\x9c\x09\xdf\x08\xbf\x5a\x5e\x24\x0d\x24\xdd\x7c\xb6\x6e\xa2\x23\x29\x8e\x74\x67\xb2\x62\x1d\xe9\xde\x21\x40\x33\x32\x3e\x1d\x49\xb7\x30\x5b\x95\x99\x8d\xe2\x44\x41\x21\xdf\x94\xe3\x10\xcf\x29\x31\x65\xaa\x1c\xe2\x16\x14\x30\xf1\xc3\x55\x99\x0d\x46\x0a\xb3\x5a\x2d\x9c\x93\x36\x3d\x48\x2f\xc0\xda\x0e\x01\xf8\x51\x3a\x72\xe8\x22\xe0\x5e\x02\x49\x59\x08\x99\x35\x12\xef\xb0\xcb\x6b\x60\x16\x68\x2f\x20\xc9\xb0\x1b\xd4\x47\xfc\xe3\xc5\xd8\x9d\x3f\xc2\xf9\x27\xac\x77\xb0\xac\x4f\xef\x2c\xa5\xd1\x7d\xd2\x6e\x0f\x7a\x4e\xf7\x3d\xf7\x76\x6a\x3a\x83\x86\xbb\xff\xc9\xff\x5a\xc8\x16\x1a\xab\xca\xab\x72\x91\xbe\x89\xf5\x1e\x95\x82\x07\xac\x10\xab\x7e\x40\xfc\xd5\x76\xca\xd0\x1b\xe9\x14\x33\x3a\xd2\x29\xc5\xda\x91\x4e\x29\xaf\x24\x72\xb5\xd5\xb9\x14\x13\xaf\x35\x6b\x8d\x76\x94\xd2\x97\xd8\xea\x38\xa7\xc1\xd1\x29\x88\x1e\x6b\xb7\x0f\x77\x8a\xfd\xc5\x9d\xd2\xf1\xa4\x52\x4e\x5a\xfe\x7e\x1e\x46\x3e\x24\x44\xa9\x6b\xb3\x98\x5f\xc2\x34\x8c\x61\xef\xdc\x29\xf2\x0e\xdd\x06\x50\x3f\x28\x45\x7b\xc4\xe9\x58\x8c\xda\x16\x7e\xe7\x0a\x43\x0b\x1f\xa8\x2b\x02\x16\x99\x19\x5e\x74\x89\x93\xf2\x8d\xbc\x9d\x3f\x21\x76\x63\x3d\x3a\xec\xce\x39\x06\xcc\x65\xfa\x12\x5b\x2e\xa7\x1e\x40\xb9\x03\xbe\x15\x70\x2f\x82\x64\x15\x52\x7f\x05\x72\x25\x5f\x26\xc0\x27\xf4\x92\x3e\x4a\xbe\x07\x74\xea\x49\xb2\x1d\x46\x82\x53\x96\xfb\x0f\xa8\x47\x84\x28\xf5\x6f\xfb\x27\x3b\xd8\x07\x23\xbb\x76\x8a\x64\x4d\xdb\x00\xca\x0e\xf4\x4d\xd4\xdb\x17\xf3\xfd\xaf\x67\x06\x29\x56\x34\xa5\xf0\xd7\xa3\x70\x82\xbd\x35\x95\xed\xfd\x7f\x64\xfe\xdc\xf3\xa9\xae\x24\x72\x6b\x40\x8d\x03\xdd\x66\xe6\x1c\x07\x66\xbe\xbe\xa4\x2e\xb7\x51\x3b\x8a\x6e\x05\xdc\x2e\x07\x7a\x4d\x0f\xe4\x4a\x2e\x3d\x85\x7e\xd5\x81\xfe\x85\x9e\x24\xcf\xc2\x48\xf0\x99\xa5\xff\x21\x35\xe8\x27\x05\xf7\x13\x8b\xaa\x5c\xe9\x3e\x83\xf9\x2d\x93\x0d\xb3\xb6\x0d\x02\x81\x7f\xf2\xc6\x9f\x1f\x4d\x2f\xd1\x85\x7c\xe1\x93\x38\x67\xde\xb6\x7f\x84\x75\xf9\x92\x31\x4a\x35\x4d\x38\x8b\xf6\xbf\xab\x8e\x64\x7b\x08\x34\x1a\x5d\x16\x1b\x43\x98\x7b\xd1\x5c\x2d\x93\xc5\x62\xe3\x04\xa6\xe5\x1b\x8d\x5a\x2b\x5a\x62\x29\x03\x95\x79\xd6\x43\x44\x9e\xde\x8c\x82\xa6\x7a\x23\xe7\x78\x8d\x91\xcf\xc4\xed\x8d\x7a\x28\x9f\x82\x75\x10\x0d\x6d\xdc\x0b\x0e\xf3\x8e\x52\x33\xe4\x4a\xba\x12\x60\x36\x42\x66\x3f\x49\x7a\x36\xb8\xdc\x41\x92\xe0\x6a\x24\xd6\x79\xaf\x3f\x92\xea\x04\xb7\x22\xef\x7c\xcb\x94\x3a\x7b\x74\x30\x6e\xba\x9f\x54\xeb\x43\x01\x63\xcc\x2f\x2f\xfb\x4c\x36\xd8\xd7\xf0\xfd\x1f\x66\x06\x29\x4c\xcd\x9b\x93\x5c\x50\x65\xd7\x42\xe5\xd8\x5d\x82\xef\xa9\xff\xd7\xa7\xcb\xcb\x9f\x8a\x2e\xf1\xae\x8c\xd5\xa9\x6e\xe3\xc5\xf5\x69\xf5\xed\xb7\xa5\x6d\x9b\x3e\xbb\x40\x2f\x74\xb7\x70\xd6\xef\x38\xe6\x4a\x0b\xf1\x94\x9d\x9a\x8e\xd0\x47\xd4\x13\x87\xd5\x83\x59\xca\xd4\xa7\xd5\x85\x27\xec\xa3\xea\xbd\x71\xcf\xa8\x4f\x7a\x4a\x7d\xfc\x8b\xd4\x85\x3f\xac\x2e\x1c\x55\x0f\xff\xbe\x7a\xc4\x53\xea\x11\xc3\xea\x98\x65\x98\x3d\xaa\xb3\x13\xeb\x8f\x12\x3e\x2a\x96\x7d\xd2\xbf\x70\x4e\x4b\x0a\x1c\x3a\xd3\x1d\x24\x32\x34\x6d\x03\xe3\x38\xbb\x83\x22\x61\xad\xea\xae\x64\xe5\xe0\x8d\x72\xa5\x5a\xf5\xd6\xdc\x2e\xf2\xdc\xb3\xa7\xa2\x13\xc0\x00\xef\x35\x78\x0f\xbc\x42\xef\xf1\x4c\x26\xaa\x66\x8e\x96\x8b\x10\xcd\xd3\xe8\x58\x23\xed\x32\x3e\x2f\x5f\x5d\x8c\x13\x84\xc9\x0c\x8a\xf7\x97\x94\x12\x5a\x75\x79\x85\x0e\xb5\x94\xee\x37\xd7\x01\x35\xde\x50\x9d\xc7\x69\xad\x45\x85\xc6\x43\xc5\x3a\x33\x94\x87\x23\x46\xac\x62\xb4\x5b\xda\x75\x90\x1b\x71\x29\x01\x3e\xd9\x43\x11\x57\x29\x79\x0e\xc0\xca\x8c\x24\x09\xae\x45\x1d\x2a\xfb\x36\x4a\x38\xe8\x27\x45\xef\x2f\x84\xcd\x8e\xd3\xdc\x63\x6f\xf4\xd5\x99\x9b\xcb\x80\xc0\x9f\x21\x7e\xdf\x35\x73\x68\x30\xbb\x22\x74\x91\x89\xe1\x45\x8f\x7b\xf6\xf1\xfc\x17\xf6\xab\xad\x94\x07\xcf\x55\x4a\xe3\x46\x4d\xd6\x54\xeb\xe9\xc0\x0f\x16\x5c\x8f\xef\xd8\x50\x05\x64\xa7\xcc\xaa\xf7\x47\x86\x67\xc1\x91\x03\x8e\xe1\x59\x00\x60\xa8\xb4\x82\x5d\xbf\xd4\xc7\x29\xc0\xd7\xa7\xe7\xca\xf1\xf0\xca\xbe\x84\xde\x01\xc7\xf0\x9c\x34\x3a\x3c\xa3\x5e\xc7\xf0\x8c\xe8\x4b\x7c\x32\x3c\x23\xbe\x1b\x9e\xd2\xe1\xe1\xf9\xf9\xc8\xf0\x64\x88\xf5\xf6\x74\x97\xaf\x0f\x3a\xe9\x75\xde\x20\x99\x2f\x1a\x77\x2f\xc8\xbe\x63\xae\xe6\xdc\xf4\x2c\x06\xed\x4d\x68\x0f\xfc\x34\x9e\xcd\x7f\xb7\x3a\x0f\xbf\xf4\xea\x84\xa8\xc8\x60\x57\xdc\x5d\x4c\x0b\xb7\xa1\x2d\x0d\x2c\xae\x7b\xbf\x97\xcc\x74\xad\x75\xd5\x5b\xf3\x95\x00\x4c\xfb\x67\x00\x00\x00\xff\xff\x08\xb5\x57\xf9\x75\x11\x00\x00")

func assetsIdleGifBytes() ([]byte, error) {
	return bindataRead(
		_assetsIdleGif,
		"assets/idle.gif",
	)
}

func assetsIdleGif() (*asset, error) {
	bytes, err := assetsIdleGifBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/idle.gif", size: 4469, mode: os.FileMode(438), modTime: time.Unix(1565407540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRunGif = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd6\x7b\x54\x93\xf7\x1d\xc7\xf1\x1f\x49\x8a\x24\xe4\xc9\xf3\x3c\x79\x6e\x51\x3c\x2e\x3e\x49\x04\x44\x58\xac\xa2\x29\xd6\x09\x5e\x90\x5b\x35\x47\xaa\x02\xba\xa9\x48\x1d\x75\x19\xb5\x8a\x43\xbc\xb4\x21\x04\x91\x68\xb8\xdf\x42\x20\x98\x34\x21\x60\x10\x15\x14\x14\x29\x86\xcb\xc0\x95\x1d\x2f\x73\xb3\x56\x2a\x88\xca\x45\x44\x88\x75\xd6\xb9\xd5\xb2\x13\xd0\xd3\x9d\xae\x9b\xba\x73\x96\xbf\xf3\xd7\xeb\x7c\x7f\x9f\xf7\xb3\x32\x34\x58\xf6\xce\x16\x02\xcc\x04\x49\x00\xcc\x1c\x77\x5f\xb5\xe2\xfd\xc8\x65\x41\xf2\x15\x6f\xfb\x49\x99\x2e\x00\x80\x99\xcf\x58\x6c\x0e\x00\x60\x0e\x00\x00\x38\xff\xa6\x06\x00\x6c\x91\xf9\x6b\xa2\x16\xaf\xf0\x9e\x77\xb7\xf4\x77\x81\x42\x41\x67\x72\x4c\x45\x4c\xf0\x78\x67\xe9\xf8\x55\x73\x54\x74\x84\x52\x95\xe8\xe3\x33\xcb\x6f\x9a\x68\xc9\x92\x85\x41\xca\xe4\x04\xbb\x5e\xbc\x66\x3d\xe5\xbb\x28\x65\x5d\xf0\xd6\xc0\xc5\x9f\xab\xa2\xc5\xe1\xeb\x1b\xb6\xcb\xdf\xf7\x97\x3d\xe8\xd8\x03\xfe\xed\xf7\x96\x43\x28\xcc\x34\x0b\x58\x2a\x79\x66\x4b\x09\x27\xbe\x91\xe1\x7b\xa0\xf9\x6c\x23\xef\xbb\xb2\xce\xba\x5f\x8d\x58\x37\x3c\x5b\xd3\xd0\x1d\x31\xdf\x81\x1a\xae\x58\xd8\x84\x10\xaf\x79\xeb\x37\x41\xb3\xc5\x82\xe6\xf4\xd4\x20\x4e\x20\xc2\x70\xf5\x9d\xd9\x54\x40\x23\xa9\x89\xb1\x33\x56\x1d\xc2\x0f\xdf\x4e\xba\x54\x3e\x0f\x57\x86\xaf\xde\x9f\xca\x86\x78\x9c\xb8\xb4\xfd\x90\x36\x1c\x46\xe0\x5c\x74\xcb\x14\x3e\x06\xcd\x43\xf4\xd9\xb9\x30\x8a\xf2\x71\x0c\xf3\xd1\x5b\x0d\x56\x9c\x20\x2c\xb4\xdc\x5a\x9a\xad\xb7\x55\x23\x80\xa4\xe4\x55\x39\x75\x67\x88\xd2\x73\x8d\xac\x53\x20\x17\xbf\x50\x49\xc2\x6d\x80\xb5\x9f\x69\xae\xb6\x57\xc2\x5d\x22\xb5\xd6\x8c\x9d\x32\xc0\x92\x23\x50\x8f\x21\x0e\x64\x0a\x04\x5a\x62\xaa\xae\x9f\xee\xfe\x53\xcd\xe8\x10\x76\x8d\xe8\x67\xea\x86\x04\x4f\xae\x6d\x7c\xd6\x7d\xe5\xab\xbb\x0c\x65\x6f\x7d\x52\xf5\x3d\xdf\xbe\xf4\x14\xf5\x92\x24\x89\xf4\x4c\x6a\x88\xc9\x25\x40\x23\xf6\xcb\x75\x73\xf9\x01\xd9\x05\x30\x00\x1f\xfc\xec\x0d\x91\x13\xec\xfa\x20\x65\xf2\x8f\x90\xff\x8b\xb0\x13\xf9\x86\x50\x98\x29\x46\x58\x2a\xb9\xab\x24\x9b\x13\x1f\x56\x3b\xf0\xac\x67\x58\x36\xb2\x60\x46\x5e\x53\xf1\xcf\x17\x0e\x5b\x14\xf5\xd7\x8f\xae\x8c\x0f\xd8\xe0\x2f\x30\x06\xfa\x46\xb8\x7f\xf1\x81\x72\xf3\xd0\x0c\x9e\xab\x97\x0a\x91\x6e\x64\x6f\x52\xb8\xa7\x08\x8a\x31\xc7\x47\x0c\xce\x0e\x8f\xdb\x7b\xce\x86\x9c\xf2\xf2\x7f\xf4\x29\x9b\xcb\x51\xfb\xa6\xec\x61\x42\x3c\x8e\x04\x46\xb2\xd0\x4d\x4e\x61\x48\x8b\x64\x66\x4f\xf8\x6a\xe1\x12\x9d\x09\x27\x88\xa3\x22\x93\x29\xcb\x56\x61\x85\xc1\xaa\xea\x12\x8b\x95\x30\x91\x75\x3a\xd6\x0e\xfc\xc4\xd9\x73\x64\x23\xd0\x25\x63\x27\x6d\x48\x23\x4b\xa4\x2c\xb7\x7d\x26\x61\xee\xc8\xba\x9e\x95\x58\x08\x51\x85\x84\x40\x50\x24\x2f\x04\xe5\xfd\x95\x89\x22\xea\x62\x03\x91\xb8\xa8\x9b\x1a\x6e\x18\xcd\xe8\xa7\xac\x55\x61\xf4\x30\x05\xee\x0e\xf9\xde\x71\xe1\x7a\x65\x2f\x77\xfb\x01\x93\x01\x00\xe0\xbf\xee\xc5\x2e\x59\xb2\xd0\x6f\x9a\x48\xbc\x66\x7d\x90\x32\x79\x92\x31\xc1\xae\x7f\x1d\x49\x27\xe6\x5f\x84\xc2\xcc\xb8\x0f\x0d\x95\x53\xab\x97\x7a\x9c\x8e\x93\xfe\xf1\x41\x77\xe3\xc9\x90\xba\xa4\x72\x66\x93\x87\x6d\x96\xf0\x61\x8c\x3a\x6e\xe7\x5a\xda\xd5\x2d\x2d\xde\x65\x7b\x09\xb4\x8e\x95\xfa\xed\x0e\x19\x84\xa8\x95\x2e\x01\xfd\x26\xe4\x50\x8b\xac\x65\x81\x0f\x69\xd1\x15\xbe\xb7\xda\x6b\xb4\x62\x6e\x8a\x21\x42\x8a\x7b\xed\xdd\x0d\x41\x5c\x4f\x1e\x0c\xf3\x36\x4e\x41\x50\x28\x3d\x83\x9f\xc1\xe3\x21\x18\x9a\x93\x97\x97\x81\xe1\x3a\x49\x41\x2e\x3f\xcf\xc0\xde\x67\x3c\x64\xb6\x99\x77\x8b\x09\xe2\x98\x0d\xe6\xd7\x88\x4e\x12\x86\x3a\xfe\x3e\xb6\xe4\x24\x60\xa2\x6d\x68\x46\x86\x17\x13\xea\xe8\xba\xa8\x26\xd5\x38\x45\x65\x7b\xaa\xa1\x76\xb4\x9c\x3c\x2a\x51\x83\xaf\xf0\xbe\xee\xaf\x3d\xfb\xee\xb4\x7b\xdf\xc6\x2f\xdd\x9b\x35\xd0\xf2\x07\xef\xde\xf2\x00\xe6\x37\xa0\x27\xe0\x29\x20\xc9\x7f\x88\x9f\x7f\x77\xcb\xdd\xe5\xa7\x25\x35\x51\x8b\xb7\xc8\xfc\xdf\x48\x72\x6b\xe0\xe2\x04\xbb\xbe\x61\xbb\xfc\x73\x55\xf4\x2b\x24\xaf\x39\x25\x11\x30\xf0\x0e\xc7\x26\x34\x9f\x08\xe5\x9d\xf6\xb0\xde\x8f\x3a\x2f\xab\xd6\xbc\x3b\xfd\x72\x30\x63\x24\x42\x1d\x57\xeb\x36\x9d\xcf\xb9\xd2\x9a\x17\xea\x71\xd6\xed\xe0\x48\x9f\x7d\x3e\xed\xc6\x68\x8b\x6c\x7c\xc8\x40\x0e\xa5\xc8\x5a\xfc\x92\x3e\x8c\xae\x7f\xd7\x18\x95\xf8\x7b\x56\xf2\xdb\x2d\xf2\xe2\x47\xbb\x20\x68\x1b\xcf\xe9\xb8\x01\x41\x53\x23\xd2\xd2\xd3\xd3\x10\x3e\x9a\x99\x05\x63\xc5\xe9\xf9\x80\x9d\x0c\x70\xe3\x41\x1d\x66\xb1\x14\xef\x32\x9a\x8a\x2b\xac\x58\xd5\xb1\x83\xd5\x15\xd5\x0a\xda\x08\xf8\xf9\x04\x71\x1c\xde\xc6\x44\x5b\x5b\xd3\xb7\xd1\x50\x76\x76\x47\x30\x44\xaa\x08\x8a\xd2\xfe\x52\xd5\x86\x12\x28\x59\xf0\x67\xe8\xcb\x26\xe2\x66\xeb\xb6\xde\x26\xb2\xef\x0e\x3d\x00\xdd\x23\xc4\x7d\xa2\xe1\x9e\x6e\xb1\xca\xd1\x45\xcf\x7f\xba\x62\xed\xdf\x9f\x7f\x3f\x4e\x2f\x05\xff\xfa\xbc\x01\xc0\xfe\xf7\x8b\xdc\x1a\xb8\xb8\x61\xbb\x3c\xc1\xae\x7f\xb5\xe3\xbd\x97\x1b\xca\x70\x6e\x68\x4c\xfd\xc8\xc4\xf3\x4e\xd5\x76\x8a\x0d\x63\x45\x1e\x65\xb1\xde\xfa\xdf\x9e\x79\x8c\x1a\x2e\x17\x84\x86\x7a\x45\xb9\xaf\xad\x92\x06\x4a\xf7\xc0\x53\xbc\x37\x2b\x85\x2c\xee\xda\x39\x51\xdc\x40\xa1\xeb\x90\x7a\xff\xf1\x28\x69\x9f\xeb\xb9\x5f\x18\x87\xc2\xaf\xb2\xf6\xae\x66\x73\x39\x0a\xe5\x3e\x08\xe2\x2a\x78\x30\x6f\xb3\xf3\x2c\xb5\x70\x11\x8f\x87\xc0\x7c\x34\x56\x57\x64\x2c\x2a\x8b\xc5\x32\x61\xdc\x58\x46\x00\x76\x0a\x9b\xc6\x6a\x79\x55\x78\x95\x11\xdf\x77\xaa\xae\xb2\xbe\xb9\xb2\xf1\x7c\x59\xf3\x85\xfa\x9d\x12\x26\x84\xa2\xed\xed\x11\x1a\x93\x51\xa1\x81\x48\x0d\x41\x51\x05\xb1\x1a\xd0\xd5\x45\x10\xa4\x42\x84\xf6\xf5\xa1\xa4\xc1\xe7\x3a\x3d\xd8\x37\xfc\x40\x4c\x5e\x1f\x18\xfb\x6b\xaf\xe4\xee\xb7\x83\xf4\xa3\x6f\x24\x23\x2e\x47\x16\x66\x96\x36\x27\xb8\x86\xcf\xbf\x91\x23\xbd\xa8\x44\x67\x82\x37\xdb\xcd\x49\xd5\xf1\xab\x66\x1f\x9f\x59\x93\xb6\x3f\x19\xa7\x57\xec\xe6\xad\x97\xb0\x2f\x76\xd3\x3e\xf5\xc2\x98\x6c\xa4\x2d\xc3\x3a\xf7\xd6\xa5\xa7\xa9\x55\xc1\x0b\x4a\x2f\xaf\x9f\xd6\xe1\x26\x8f\xb7\xd5\x8b\x9d\x71\x3a\x9c\x44\x0b\x9a\xd3\xdb\x12\x9d\xb0\xd7\x15\x51\xf9\xf2\x6c\xe4\x90\xcb\xde\xa0\x4d\x9e\x37\xcd\xb7\x8a\x2e\x6d\x92\x8e\xb2\x25\xf1\xac\xfd\xf2\x4f\xa0\x14\xdf\xd4\x03\x4c\x1e\xd7\x17\x46\x60\x78\xa2\x4e\x3c\x9e\x04\xc9\xcd\xcd\x9f\x18\xcf\xd2\xb2\x72\x2b\x82\x13\x16\x51\x95\xc1\x6a\xab\x16\x5b\x73\x72\xca\x6a\x09\x84\x64\xd1\x65\x39\x6a\xf7\xcf\x88\xf6\xb2\x35\xcd\x39\x07\xda\x1b\xcb\x9a\xde\x4b\xc3\xaa\xf2\x36\xf0\x12\xf3\xbe\x84\x23\x41\x09\x8f\x2a\x21\x04\x02\x7d\x64\x09\x30\x0f\x12\xd4\x4d\x11\xd6\xd5\x4e\x1d\x97\x50\x3d\xa3\xf7\xcd\x91\x8f\x79\xa3\x0e\x6c\xd8\xf7\xfb\x87\x31\x05\x1b\x1a\x3e\x00\x2d\x2a\xd7\x95\xea\xff\x4f\xee\x5f\x21\xda\x3b\x39\x9e\xf1\x61\xae\x0a\xa1\x5b\x8d\xd2\xb5\xed\x4a\xf3\x47\x73\xf4\xfe\x87\xc7\xcf\xe6\xc1\x83\xe7\x8d\x8a\xb9\xaa\x9d\x53\x43\x08\x76\x5a\xbc\x4b\x4c\xc8\x13\x86\x73\x3c\xa5\x95\x88\x5a\x99\x12\x76\x7b\x5d\xa4\x5b\xfb\xe6\xd2\xf8\x5d\xd8\x6c\xfb\xcd\x2b\x35\x0d\x2b\x34\x6f\x85\x45\x0f\x7a\x0a\x38\x29\xde\x9f\xec\x76\x66\xc8\x6b\xc2\x72\xe3\x44\x87\x3c\x91\xa2\xc3\xda\xc9\xd2\x17\x16\x15\x1f\x2e\x72\x96\x68\x96\xa9\xd8\x54\x61\x45\x3c\xb5\x66\x73\x0d\x51\x04\xc2\x45\xb6\x23\xf8\x19\x13\x79\x4e\xc4\xda\x0d\x63\xd6\xfa\x0b\xa4\x5d\x7c\x00\x2a\xc7\x6c\x5a\x3b\x4b\xb2\x1b\xaa\xbd\xf1\x71\x3e\x44\xe5\x13\x02\x41\xc1\xec\x7c\x70\xb9\xa3\xf2\x63\x11\x35\xd8\x79\x9f\xa6\x1c\x9d\x55\xf7\x1f\xe4\x77\x8c\xd2\xe5\x8e\x3b\xa3\x0f\x30\xc7\xdf\x96\x67\x9f\x47\xe4\xcb\xb5\x2a\xd1\x76\x6e\x08\xc5\xf8\xb1\xe9\x8c\xd7\x9b\xd1\x57\xd6\x5d\x1c\xbe\xfe\x3f\x7e\x42\xf5\x4f\xd6\x7d\x20\x5a\xd3\xea\xd5\xf4\x6b\x61\xbb\x4d\xc6\x1d\x9b\x3e\xf6\x04\x1a\xb3\x46\x43\x0e\xf7\x4b\x3b\x97\x81\x55\x2b\xe3\x03\xf2\xda\x45\x13\x75\x0f\x2d\x7f\x59\x77\xe1\x44\xdd\xf9\x2f\xea\x7e\x6c\xa4\x75\x6c\x47\x4e\xec\x5c\x45\xcf\x73\x36\x97\x93\x1a\xaa\x4c\x72\xaa\xfa\xc3\x88\x16\x79\x51\x77\x1f\x58\xa7\xcd\x9a\x50\x2d\xa0\x57\x95\x94\x20\x99\x3a\x9c\x20\x30\x9a\x34\x5b\xac\x25\xc7\x6c\x5a\x8a\x3c\xc1\xb2\x56\xd6\xc2\xa7\x09\x1d\x42\x21\xe7\x2c\x00\xbf\x88\xd9\xec\x2d\xad\x56\xc0\x4a\xa2\x8d\x5d\xa7\x2e\xd3\x9f\x86\x41\x46\x8b\xd6\x3f\xbd\xf0\xfc\x9d\xc4\x42\x48\x20\x28\x24\xa6\x3a\x43\x6f\x74\x54\x27\x8a\x06\xbf\xe8\x22\x1e\x83\xc1\x27\x4f\x97\x2d\xec\x76\x04\xdf\x78\x9c\xee\xd6\xc6\xe2\x4a\xbe\x7e\xa2\xdc\xe9\xd7\xab\x39\x20\x5e\x0a\xc0\xa2\x7f\x06\x00\x00\xff\xff\x5a\x75\xa7\x9f\xbe\x0a\x00\x00")

func assetsRunGifBytes() ([]byte, error) {
	return bindataRead(
		_assetsRunGif,
		"assets/run.gif",
	)
}

func assetsRunGif() (*asset, error) {
	bytes, err := assetsRunGifBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/run.gif", size: 2750, mode: os.FileMode(438), modTime: time.Unix(1565407540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/idle.gif": assetsIdleGif,
	"assets/run.gif":  assetsRunGif,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"idle.gif": &bintree{assetsIdleGif, map[string]*bintree{}},
		"run.gif":  &bintree{assetsRunGif, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
